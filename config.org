#+TITLE: ~/.doom.d/config.el

* 参考文献
- https://alexpeits.github.io/emacs.d/
- https://tecosaur.github.io/emacs-config/config.html
- ~/Desktop/lit-config.pdf
- https://gitlab.com/nobiot/doom.d/-/blob/master/config.org
- https://github.com/dangirsh/.doom.d#org-transclusion

config.el を .org に移行する実験。

- まずはひとつのコードブロックにそのまま取り込む
- =M-x org-babel-demarcate-block= でブロックを分けることができるので、単位ごとに下のようにコメントを付けていく

  コメントを付ければ、いらない設定とか不明な設定が見えてくる。

  まずは config.el だけ .org に移行して、ゆくゆくは custom.el とかこのディレクトリすべての .el ファイルを .org に移行する。

* やりたいこと
** TODO 更新した後の Doom Emacs への反映方法を調べる
** TODO いらない設定を消す
** TODO 設定ファイルの .org 化
** TODO 一般的なドキュメントを書く (Org-Roam に？)
** DONE 保存したら自動的に tangle するようにする
** DONE GitHub に入れる

* 基本的な設定
** レキシカルバインディング
レキシカルバインディングを有効にしたほうが (少し) 速い ([[https://ayatakesi.github.io/lispref/25.1/html/Lexical-Binding.html][Emacs のドキュメント]], [[https://nullprogram.com/blog/2016/12/22/][ブログ記事]])。

#+begin_src emacs-lisp :tangle ./config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

#+end_src

なんとなく Doom Emacs の元のコメントを残しておく。
#+begin_src emacs-lisp :tangle ./config.el
;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!
#+end_src

** Org ファイルの保存時に自動的に設定ファイルに変換する
たまに変更後に =C-c C-v t= を忘れ、Org ファイルと設定ファイルの間に齟齬が生じてしまうことがある。これを避けるため、Org バッファを保存したときに自動的に =org-babel-tangle= を実行するフックを設定できる。

#+begin_src emacs-lisp :tangle ./config.el
(add-hook 'org-mode-hook
          (lambda () (add-hook 'after-save-hook #'org-babel-tangle :append :local)))
#+end_src

** 名前とメールアドレスの設定
#+begin_src emacs-lisp :tangle ./config.el
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Yasuhito Takamiya"
      user-mail-address "yasuhito@hey.com")
#+end_src

** Effective Emacs
https://sites.google.com/site/steveyegge2/effective-emacs

=M-x= をメタキーを使わずに入力
#+begin_src emacs-lisp :tangle ./config.el
(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)
#+end_src

高速にタイピングをしていてタイプミスをした時は、バックスペースで一文字ずつ消して修正するよりも単語単位で一気に消して打ち直したほうが速い。
#+begin_src emacs-lisp :tangle ./config.el
(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)
(global-set-key "\C-c\C-k" 'kill-region)
#+end_src

* フォントの設定
とくにいじらない
#+begin_src emacs-lisp :tangle ./config.el
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+end_src

* 日本語環境の設定
この設定がなぜ必要だったか忘れた。たしかフォントの設定だったと思うけど...
いらなかったら消す
#+begin_src emacs-lisp :tangle ./config.el
;; 日本語環境を使う
(set-language-environment "Japanese")
#+end_src

* テーマの設定
iA Writer のようになるべくシンプルなテーマが好み。
#+begin_src emacs-lisp :tangle ./config.el
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one-light)
#+end_src

* 行番号を表示しない
#+begin_src emacs-lisp :tangle ./config.el
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type nil)
#+end_src

* Org-Mode の設定
** ディレクトリとかの基本設定
#+begin_src emacs-lisp :tangle ./config.el
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
(setq org-agenda-files '("~/org/" "~/org/gtd/" "~/org/roam/" "~/org/roam/daily/"))
#+end_src

*** TODO Org-Roam でファイルを足すと org-agenda-files に新しく作ったファイルが追加されないので、どうやってやるかを調べること。

** タスク関連の設定
GTD 用に NEXT とかのキーワードを使う

#+begin_src emacs-lisp :tangle ./config.el
(after! org
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
          (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))
  (setq my/org-agenda-directory "~/org/gtd/")
  (setq org-capture-templates
        `(("i" "inbox" entry (file ,(concat my/org-agenda-directory "inbox.org"))
           "* TODO %?")
          ("l" "link" entry (file ,(concat my/org-agenda-directory "inbox.org"))
           "* TODO %(org-cliplink-capture)" :immediate-finish t)
          ("c" "org-protocol-capture" entry (file ,(concat my/org-agenda-directory "inbox.org"))
           "* TODO [[%:link][%:description]]\n\n %i" :immediate-finish t)))
  (require 'find-lisp)
  (setq org-agenda-files
        (find-lisp-find-files org-directory "\.org$"))
  (setq org-refile-targets '((org-agenda-files . (:level . 1)))))
#+end_src

** ブラウザからキャプチャ
#+begin_src emacs-lisp :tangle ./config.el
;; Capture Links From the Web
;; https://www.ianjones.us/own-your-second-brain#orga972198
(require 'org-roam-protocol)

(after! org-roam
      (setq org-roam-capture-ref-templates
            '(("r" "ref" plain (function org-roam-capture--get-point)
               "%?"
               :file-name "websites/${slug}"
               :head "#+TITLE: ${title}\n#+ROAM_KEY: ${ref}\n- source :: ${ref}"
               :unnarrowed t))))
#+end_src

** 画像
#+begin_src emacs-lisp :tangle ./config.el
(use-package org-download
  :after org
  :defer nil
  :custom
  (org-download-method 'directory)
  (org-download-image-dir "images")
  (org-download-heading-lvl nil)
  :config
  (require 'org-download))

;;(after! org
;;        (setq org-download-method 'directory)
;;        (setq-default org-download-image-dir "~/org/roam/images"))
#+end_src

** Org-Roam
#+begin_src emacs-lisp :tangle ./config.el
(after! (org org-roam)
  (defun my/org-roam-export-all ()
    "Re-exports all Org-roam files to Hugo markdown."
    (interactive)
    (dolist (f (org-roam--list-all-files))
      (with-current-buffer (find-file f)
        (when (s-contains? "permanent notes" (buffer-string))
          (org-hugo-export-wim-to-md))))))
#+end_src

#+begin_src emacs-lisp :tangle ./config.el
(defun my/org-roam-refresh ()
  (interactive)
  (org-roam-db-build-cache :force)
  (org-roam-buffer--update-maybe :redisplay))
#+end_src

** Org-Roam server
#+begin_src emacs-lisp :tangle ./config.el
(use-package org-roam-server
  :ensure t
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows "from"
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))

(defun org-roam-server-open ()
  "Ensure the server is active, then open the roam graph."
  (interactive)
  (smartparens-global-mode -1)
  (org-roam-server-mode 1)
  (browse-url-xdg-open (format "http://localhost:%d" org-roam-server-port))
  (smartparens-global-mode 1))

;; automatically enable server-mode
(after! org-roam
  (smartparens-global-mode -1)
  (org-roam-server-mode)
  (smartparens-global-mode 1))

(setq org-html-mathjax-options
      '((path "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js")
        (scale "100")
        (align "center")
        (font "TeX")
        (linebreaks "false")
        (autonumber "AMS")
        (indent "0em")
        (multlinewidth "85%")
        (tagindent ".8em")
        (tagside "right")))
#+end_src

** Org-Mode から PDF
#+begin_src emacs-lisp :tangle ./config.el
(setq org-latex-pdf-process
      '("platex -shell-escape %f"
        "platex -shell-escape %f"
        "pbibtex %b"
        "platex -shell-escape %f"
        "platex -shell-escape %f"
        "dvipdfmx %b.dvi"))
#+end_src

** Deft: Org のノートを Notational Velocity のように検索
https://github.com/jrblevin/deft

#+begin_src emacs-lisp :tangle ./config.el
(use-package! deft
  :after org
  :bind (:map deft-mode-map
         ("C-c C-g" . my/deft-refresh))
  :config
  (setq deft-directory org-directory
        deft-recursive t
        deft-extensions '("org")
        deft-ignore-file-regexp "setup.org\\|anki.org"
        ;; Org ファイル中の #+title などをプレビューに表示しない
        ;; https://org-roam.discourse.group/t/configure-deft-title-stripping-to-hide-org-roam-template-headers/478
        deft-strip-summary-regexp "\\([\n ]\\|^#\\+[[:upper:][:lower:]_]+:.*$\\)")
  (defun my/deft-refresh ()
    (interactive)
    (my/org-roam-refresh)
    (deft-refresh)))
#+end_src

** Org で Anki カードを作る
Org-roam で書いたメモから [[https://github.com/louietan/anki-editor][louietan/anki-editor]] で Anki カードを生成する。

デッキは 1 つ
#+begin_src emacs-lisp :tangle ./config.el
;; Anki-editor
(setq my/anki-primary-deck "Mega")
#+end_src

=M-x anki-editor-push-notes= する時に =anki-editor-mode= マイナーモードが有効でないと、 =.org= に指定した画像が [[https://github.com/louietan/anki-editor/issues/30#issuecomment-450463083][Anki に同期されない]]。そこで、自動的に =anki-editor-mode= を有効にする。
#+begin_src emacs-lisp :tangle ./config.el
(add-hook 'org-mode-hook #'anki-editor-mode)
#+end_src

数式を表示するには、$\TeX$ を画像に変換させるのではなく MathJax を使う。
#+begin_src emacs-lisp :tangle ./config.el
(setq anki-editor-use-math-jax t)
#+end_src

キャプチャした Anki カードのデフォルトの保存先
#+begin_src emacs-lisp :tangle ./config.el
(setq org-my-anki-file (concat org-directory "anki.org"))
#+end_src

Anki カードのキャプチャ。basic と cloze が作れれば良い。
#+begin_src emacs-lisp :tangle ./config.el
(add-to-list 'org-capture-templates
             '("a" "Anki basic"
               entry
               (file+headline org-my-anki-file "Dispatch Shelf")
               "* %<%H:%M>   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Basic\n:ANKI_DECK: Mega\n:END:\n** Front\n%?\n** Back\n%x\n"))
(add-to-list 'org-capture-templates
             '("A" "Anki cloze"
               entry
               (file+headline org-my-anki-file "Dispatch Shelf")
               "* %<%H:%M>   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Cloze\n:ANKI_DECK: Mega\n:END:\n** Text\n%x\n** Extra\n"))
#+end_src

無視するタグ
#+begin_src emacs-lisp :tangle ./config.el
(setq anki-editor-ignored-org-tags '(“export” “noexport”))
#+end_src

~require~ する
#+begin_src emacs-lisp :tangle ./config.el
(require 'anki-editor)
#+end_src

** Org で表に日本語が入っていたらズレるのを直す
#+begin_src emacs-lisp :tangle ./config.el
(add-hook 'org-mode-hook #'valign-mode)
#+end_src

** 日本語 LaTeX
#+begin_src emacs-lisp :tangle ./config.el
(use-package! ox-latex
  :ensure t
  :config
  (add-to-list 'org-latex-classes
               '("jsarticle"
                 "\\documentclass[dvipdfmx,12pt]{article}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
                 )))
 #+end_src

** org-transclusion
[[https://github.com/nobiot/org-transclusion][nobiot/org-transclusion]]

#+transclude: t
[[file:~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/roam/20210329095350-org_transclusion.org::org-transclusion configuration (config.el)][org-transclusion configuration (config.el)]]

* TypeScript
これ、結局いるのかいらないのか分からない。
#+begin_src emacs-lisp :tangle ./config.el
;; Typescript のインデントを 2 にする
;; https://github.com/hlissner/doom-emacs/issues/2860
(after! dtrt-indent
  (setq typescript-indent-level 2)
  (add-to-list 'dtrt-indent-hook-mapping-list '(typescript-mode javascript typescript-indent-level)))
#+end_src

* Doom Emacs 設定用マクロの説明
#+begin_src emacs-lisp :tangle ./config.el
;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
